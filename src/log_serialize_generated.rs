// automatically generated by the FlatBuffers compiler, do not modify

#![allow(unused_imports)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum log_serializeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct log_serialize<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for log_serialize<'a> {
  type Inner = log_serialize<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> log_serialize<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TAG: flatbuffers::VOffsetT = 6;
  pub const VT_MSG: flatbuffers::VOffsetT = 8;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 10;
  pub const VT_THREAD_ID: flatbuffers::VOffsetT = 12;
  pub const VT_IS_MAIN_THREAD: flatbuffers::VOffsetT = 14;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    log_serialize { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args log_serializeArgs<'args>
  ) -> flatbuffers::WIPOffset<log_serialize<'bldr>> {
    let mut builder = log_serializeBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_thread_id(args.thread_id);
    if let Some(x) = args.msg { builder.add_msg(x); }
    if let Some(x) = args.tag { builder.add_tag(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_is_main_thread(args.is_main_thread);
    builder.add_level(args.level);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(log_serialize::VT_NAME, None)}
  }
  #[inline]
  pub fn tag(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(log_serialize::VT_TAG, None)}
  }
  #[inline]
  pub fn msg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(log_serialize::VT_MSG, None)}
  }
  #[inline]
  pub fn level(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(log_serialize::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn thread_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(log_serialize::VT_THREAD_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn is_main_thread(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(log_serialize::VT_IS_MAIN_THREAD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(log_serialize::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for log_serialize<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tag", Self::VT_TAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msg", Self::VT_MSG, false)?
     .visit_field::<i8>("level", Self::VT_LEVEL, false)?
     .visit_field::<i32>("thread_id", Self::VT_THREAD_ID, false)?
     .visit_field::<u8>("is_main_thread", Self::VT_IS_MAIN_THREAD, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct log_serializeArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tag: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub level: i8,
    pub thread_id: i32,
    pub is_main_thread: u8,
    pub timestamp: u64,
}
impl<'a> Default for log_serializeArgs<'a> {
  #[inline]
  fn default() -> Self {
    log_serializeArgs {
      name: None,
      tag: None,
      msg: None,
      level: 0,
      thread_id: 0,
      is_main_thread: 0,
      timestamp: 0,
    }
  }
}

pub struct log_serializeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> log_serializeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(log_serialize::VT_NAME, name);
  }
  #[inline]
  pub fn add_tag(&mut self, tag: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(log_serialize::VT_TAG, tag);
  }
  #[inline]
  pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(log_serialize::VT_MSG, msg);
  }
  #[inline]
  pub fn add_level(&mut self, level: i8) {
    self.fbb_.push_slot::<i8>(log_serialize::VT_LEVEL, level, 0);
  }
  #[inline]
  pub fn add_thread_id(&mut self, thread_id: i32) {
    self.fbb_.push_slot::<i32>(log_serialize::VT_THREAD_ID, thread_id, 0);
  }
  #[inline]
  pub fn add_is_main_thread(&mut self, is_main_thread: u8) {
    self.fbb_.push_slot::<u8>(log_serialize::VT_IS_MAIN_THREAD, is_main_thread, 0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(log_serialize::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> log_serializeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    log_serializeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<log_serialize<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for log_serialize<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("log_serialize");
      ds.field("name", &self.name());
      ds.field("tag", &self.tag());
      ds.field("msg", &self.msg());
      ds.field("level", &self.level());
      ds.field("thread_id", &self.thread_id());
      ds.field("is_main_thread", &self.is_main_thread());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `log_serialize`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_log_serialize_unchecked`.
pub fn root_as_log_serialize(buf: &[u8]) -> Result<log_serialize, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<log_serialize>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `log_serialize` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_log_serialize_unchecked`.
pub fn size_prefixed_root_as_log_serialize(buf: &[u8]) -> Result<log_serialize, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<log_serialize>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `log_serialize` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_log_serialize_unchecked`.
pub fn root_as_log_serialize_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<log_serialize<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<log_serialize<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `log_serialize` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_log_serialize_unchecked`.
pub fn size_prefixed_root_as_log_serialize_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<log_serialize<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<log_serialize<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a log_serialize and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `log_serialize`.
pub unsafe fn root_as_log_serialize_unchecked(buf: &[u8]) -> log_serialize {
  flatbuffers::root_unchecked::<log_serialize>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed log_serialize and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `log_serialize`.
pub unsafe fn size_prefixed_root_as_log_serialize_unchecked(buf: &[u8]) -> log_serialize {
  flatbuffers::size_prefixed_root_unchecked::<log_serialize>(buf)
}
#[inline]
pub fn finish_log_serialize_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<log_serialize<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_log_serialize_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<log_serialize<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
